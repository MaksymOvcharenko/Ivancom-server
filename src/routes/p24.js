import express from 'express';
import crypto from 'crypto';
const router = express.Router();

router.post('/status', express.json(), (req, res) => {
  console.log('üì© P24 webhook received:\n', JSON.stringify(req.body, null, 2));

  const { sessionId, orderId, amount, currency, sign } = req.body;
  const crc = 'a71343a7b69fea5b'; // üîí –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π, —è–∫—â–æ —Ç–µ—Å—Ç—É—î—à —ñ–Ω—à–∏–π

  // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ expected payload
  const expectedPayload = {
    sessionId,
    orderId: Number(orderId),
    amount: Number(amount),
    currency,
    crc,
  };

  // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É
  const expectedSign = crypto
    .createHash('sha384')
    .update(JSON.stringify(expectedPayload), 'utf8')
    .digest('hex');

  // üîç –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–µ—Ä–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
  console.log(
    'üßæ Expected payload (JSON.stringify):\n',
    JSON.stringify(expectedPayload),
  );
  console.log('üì¨ Sign from Przelewy24:', sign);
  console.log('üîê My generated sign:', expectedSign);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É
  if (expectedSign !== sign) {
    console.log('‚ùå Sign mismatch!');
    return res.status(400).json({ error: 'Invalid signature' });
  }

  console.log('‚úÖ Valid signature! Payment confirmed.');
  return res.status(200).json({ status: 'OK' });
});

export default router;
